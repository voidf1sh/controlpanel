<!DOCTYPE html>
<html>
<head>
	<title>Temperature Graphs</title>

	<!-- js global variables -->
	<script>
		const debug = true;
	</script>

    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

	<!-- Bootstrap CSS -->
	<!-- <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta1/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-giJF6kkoqNQ00vy+HMDP7azOuL0xtbfIcaT9wjKHr8RbDVddVHyTfAAsrekwKmP1" crossorigin="anonymous"> -->
	
	<!-- Chart.js -->
	<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/chart.js@3.5.0/dist/chart.min.js"></script>
	<!-- CSS -->
	<link rel="stylesheet" type="text/css" href="/src/main.css">
	<!-- Script for grouping and averaging temperatures -->
	<script type="text/javascript" src="/src/temperatures.js"></script>
</head>
<body>
	<div class="box">
		<div class="row header">
			<!-- Header -->
			<%- include('../partials/_header') -%>
			<div id="filter-button">
				<button onclick="toggleFilters()">Show/Hide Filters</button>
			</div>
			<!-- Sensor, Datetime, and Interval Selection -->
			<div class="center" id="filters">
				<form action="temps" method="POST">
					<label for="sensor_id">Sensor:</label>
					<select id="sensor_id" name="sensor_id">
						<option value="28-00000676d99f">Living Room (Head)</option>
						<option value="28-000007297e74">Living Room (Ceiling)</option>
						<option value="28-000006779ad0">28-000006779ad0</option>
						<option value="28-000006788573">28-000006788573</option>
						<option value="28-000004d07f35">28-000004d07f35</option>
						<option value="28-00000728fb18">28-00000728fb18</option>
					</select>
					<label for="begin">Begin:</label>
					<input type="datetime-local" name="begin" value="<%= begin %>">
					<label for="end">End:</label>
					<input type="datetime-local" name="end" value="<%= end %>">
					<label for="interval">Interval:</label>
					<select id="interval" name="interval">
						<option value="5m">5 minutes</option>
						<option value="30m">30 minutes</option>
						<option value="1h" selected>1 hour</option>
						<option value="6h">6 hours</option>
						<option value="12h">12 hours</option>
						<option value="1d">1 day</option>
					</select>
					<input type="submit" value="Submit">
					<input type="reset" value="Reset">
				</form>
			</div>
			<div id="firstlast" style="display: none;"></div>
			
		</div>

		<!-- Temperature Graph -->
		<div class="row content graph-container">
			<canvas id="graph"></canvas>
		</div>
	</div>

	<!-- Filter Toggle on Mobile Script -->
	<script>
		let visible = false;
		function toggleFilters() {
			if (visible) {
				document.getElementById('filters').style.display = 'none';
				visible = false;
			} else {
				document.getElementById('filters').style.display = 'block';
				visible = true;
			}
		}

		// Debug unhiding
		window.onload = () => {
			if (debug) {
			document.getElementById("firstlast").style.display = "block";
		}
	}
	</script>

	<!-- Handling of raw data from the server -->
	<script type="text/javascript">
		const rawData = <%- JSON.stringify(rawData) %>;
		const begin = <%- JSON.stringify(begin) %>;
		let data = groupByMins(begin, rawData, 15);
		if (debug) {
			const timestamps = Object.keys(data);
			document.getElementById("firstlast").content = `${timestamps[0]} - ${timestamps[timestamps.length - 1]}`;
		}
	</script>
	
	<!-- Chart.js -->
	<script type="text/javascript">
		var ctx = document.getElementById('graph').getContext('2d');
		var graph = new Chart(ctx, {
			type:  'line',
			data: {
				labels: Object.keys(data),
				datasets: [{
					label: "Temperature",
					data: Object.values(data),
					borderColor: '#9eb5ff',
					fill: {
						target: '80',
						below: ''
					}
				}]
			},
			options: {
				layout: {
					padding: {
						left: 0,
						right: 4,
						top: 0,
						bottom: 0
					}
				},
				maintainAspectRatio: false,
				scales: {
					y: {
						suggestedMin: 65,
						suggestedMax: 80
					},
					x: {
						ticks: {
							maxTicksLimit: 15
						}
					}
				},
				legend: {
					display: false
				},
				tooltips: {
					callbacks: {
					label: function(tooltipItem) {
							return tooltipItem.yLabel;
					}
					}
				},
				elements: {
					point:{
						radius: 4
					}
				},
				responsive: true,
				tension: 0.25,
				plugins: {
					legend: {
						display: false
					}
				}
			}
		});
	</script>

	<!-- Interval Change Handling -->
	<script>
		const intervalSelect = document.getElementById('interval')

		intervalSelect.addEventListener('change', (event) => {
			let newData;
			switch (event.target.value) {
				case '5m':
					newData = groupByRaw(rawData);
					graph.data.labels = Object.keys(newData)
					graph.data.datasets.data = Object.values(newData);
					graph.update();
					if (debug) {
						const timestamps = Object.keys(newData);
						document.getElementById("firstlast").content = `${timestamps[0]} - ${timestamps[timestamps.length - 1]}`;
					}
					break;
				case '30m':
					newData = groupByMins(begin, rawData, 30);
					graph.data.labels = Object.keys(newData)
					graph.data.datasets.data = Object.values(newData);
					graph.update();
					if (debug) {
						const timestamps = Object.keys(newData);
						document.getElementById("firstlast").content = `${timestamps[0]} - ${timestamps[timestamps.length - 1]}`;
					}
					break;
				case '1h':
					newData = groupByHour(begin, rawData);
					graph.data.labels = Object.keys(newData)
					graph.data.datasets.data = Object.values(newData);
					graph.update();
					if (debug) {
						timestamps = Object.keys(newData);
						document.getElementById("firstlast").content = `${timestamps[0]} - ${timestamps[timestamps.length - 1]}`;
					}
					break;
				case '6h':
					break;
				case '12h':
					break;
				case '1d':
					break;
				default:
					break;
			}
		})
	</script>
</body>
</html>